{"version":3,"sources":["App.js","index.js"],"names":["App","elections","setElections","useState","account","setAccount","votingContract","setVotingContract","useEffect","loadBlockchainData","async","window","ethereum","signer","ethers","providers","Web3Provider","getSigner","contractAddress","contract","Contract","VotingContract","abi","accounts","request","method","electionsCount","electionsArray","i","election","push","React","createElement","onClick","createElection","name","map","index","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uiBA6DeA,MAzDf,WACE,MAAOC,EAAWC,GAAgBC,mBAAS,KACpCC,EAASC,GAAcF,mBAAS,KAChCG,EAAgBC,GAAqBJ,mBAAS,MAErDK,oBAAU,KACRC,KACC,IAGH,MAAMA,EAAqBC,UACzB,GAAIC,OAAOC,SAAU,CACnB,MACMC,EADW,IAAIC,IAAOC,UAAUC,aAAaL,OAAOC,UAClCK,YAClBC,EAAkB,wBAClBC,EAAW,IAAIL,IAAOM,SAASF,EAAiBG,EAAeC,IAAKT,GAE1EN,EAAkBY,GAElB,MAAMI,QAAiBZ,OAAOC,SAASY,QAAQ,CAAEC,OAAQ,wBACzDpB,EAAWkB,EAAS,IAEpB,MAAMG,QAAuBP,EAASO,iBACtC,IAAIC,EAAiB,GACrB,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAgBE,IAAK,CACxC,MAAMC,QAAiBV,EAASlB,UAAU2B,GAC1CD,EAAeG,KAAKD,GAEtB3B,EAAayB,KAQjB,OACEI,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,eACJD,IAAAC,cAAA,SAAG,YAAU5B,GACb2B,IAAAC,cAAA,UAAI,uBACJD,IAAAC,cAAA,UAAQC,QAASA,IATEvB,iBACfJ,EAAe4B,eAAeC,IAQXD,CAAe,gBAAgB,mBACtDH,IAAAC,cAAA,UAAI,sBACH/B,EAAUmC,IAAI,CAACP,EAAUQ,IACxBN,IAAAC,cAAA,OAAKM,IAAKD,GACRN,IAAAC,cAAA,SAAG,kBAAgBH,EAASM,UC5CtCI,IAASC,OACPT,IAAAC,cAACD,IAAMU,WAAU,KACfV,IAAAC,cAAChC,EAAG,OAEN0C,SAASC,eAAe,W","file":"static/js/main.a791a373.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport VotingContract from \"./Voting.json\";\n\nfunction App() {\n  const [elections, setElections] = useState([]);\n  const [account, setAccount] = useState(\"\");\n  const [votingContract, setVotingContract] = useState(null);\n\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  \n\n  const loadBlockchainData = async () => {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contractAddress = \"0xYourContractAddress\"; // Dirección del contrato desplegado\n      const contract = new ethers.Contract(contractAddress, VotingContract.abi, signer);\n\n      setVotingContract(contract);\n\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      setAccount(accounts[0]);\n\n      const electionsCount = await contract.electionsCount();\n      let electionsArray = [];\n      for (let i = 1; i <= electionsCount; i++) {\n        const election = await contract.elections(i);\n        electionsArray.push(election);\n      }\n      setElections(electionsArray);\n    }\n  };\n\n  const createElection = async (name) => {\n    await votingContract.createElection(name);\n  };\n\n  return (\n    <div>\n      <h1>Voting DApp</h1>\n      <p>Account: {account}</p>\n      <h2>Create New Election</h2>\n      <button onClick={() => createElection(\"My Election\")}>Create Election</button>\n      <h2>Existing Elections</h2>\n      {elections.map((election, index) => (\n        <div key={index}>\n          <p>Election Name: {election.name}</p>\n        </div>\n      ))}\n    </div>\n  );\n  return (\n    <div className=\"App\">\n      <h1>Voting DApp</h1>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';  // Asegúrate de que este archivo existe o elimina esta línea si no lo necesitas\nimport App from './App';  // Esta importación debe apuntar al archivo `App.js` en `src`\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}