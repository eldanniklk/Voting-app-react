{"ast":null,"code":"//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toQuantity, toTwos, zeroPadValue, assertArgument } from \"../utils/index.js\";\nimport { id } from \"./id.js\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n;\n;\nfunction hexPadRight(value) {\n  const bytes = getBytes(value);\n  const padOffset = bytes.length % 32;\n  if (padOffset) {\n    return concat([bytes, padding.slice(padOffset)]);\n  }\n  return hexlify(bytes);\n}\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\nconst domainFieldTypes = {\n  name: \"string\",\n  version: \"string\",\n  chainId: \"uint256\",\n  verifyingContract: \"address\",\n  salt: \"bytes32\"\n};\nconst domainFieldNames = [\"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"];\nfunction checkString(key) {\n  return function (value) {\n    assertArgument(typeof value === \"string\", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n    return value;\n  };\n}\nconst domainChecks = {\n  name: checkString(\"name\"),\n  version: checkString(\"version\"),\n  chainId: function (_value) {\n    const value = getBigInt(_value, \"domain.chainId\");\n    assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n    if (Number.isSafeInteger(value)) {\n      return Number(value);\n    }\n    return toQuantity(value);\n  },\n  verifyingContract: function (value) {\n    try {\n      return getAddress(value).toLowerCase();\n    } catch (error) {}\n    assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n  },\n  salt: function (value) {\n    const bytes = getBytes(value, \"domain.salt\");\n    assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n    return hexlify(bytes);\n  }\n};\nfunction getBaseEncoder(type) {\n  // intXX and uintXX\n  {\n    const match = type.match(/^(u?)int(\\d+)$/);\n    if (match) {\n      const signed = match[1] === \"\";\n      const width = parseInt(match[2]);\n      assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), \"invalid numeric width\", \"type\", type);\n      const boundsUpper = mask(BN_MAX_UINT256, signed ? width - 1 : width);\n      const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;\n      return function (_value) {\n        const value = getBigInt(_value, \"value\");\n        assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\n        return toBeHex(signed ? toTwos(value, 256) : value, 32);\n      };\n    }\n  }\n  // bytesXX\n  {\n    const match = type.match(/^bytes(\\d+)$/);\n    if (match) {\n      const width = parseInt(match[1]);\n      assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n      return function (value) {\n        const bytes = getBytes(value);\n        assertArgument(bytes.length === width, `invalid length for ${type}`, \"value\", value);\n        return hexPadRight(value);\n      };\n    }\n  }\n  switch (type) {\n    case \"address\":\n      return function (value) {\n        return zeroPadValue(getAddress(value), 32);\n      };\n    case \"bool\":\n      return function (value) {\n        return !value ? hexFalse : hexTrue;\n      };\n    case \"bytes\":\n      return function (value) {\n        return keccak256(value);\n      };\n    case \"string\":\n      return function (value) {\n        return id(value);\n      };\n  }\n  return null;\n}\nfunction encodeType(name, fields) {\n  return `${name}(${fields.map(_ref => {\n    let {\n      name,\n      type\n    } = _ref;\n    return type + \" \" + name;\n  }).join(\",\")})`;\n}\n// foo[][3] => { base: \"foo\", index: \"[][3]\", array: {\n//     base: \"foo\", prefix: \"foo[]\", count: 3 } }\nfunction splitArray(type) {\n  const match = type.match(/^([^\\x5b]*)((\\x5b\\d*\\x5d)*)(\\x5b(\\d*)\\x5d)$/);\n  if (match) {\n    return {\n      base: match[1],\n      index: match[2] + match[4],\n      array: {\n        base: match[1],\n        prefix: match[1] + match[2],\n        count: match[5] ? parseInt(match[5]) : -1\n      }\n    };\n  }\n  return {\n    base: type\n  };\n}\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */\nexport class TypedDataEncoder {\n  /**\n   *  The primary type for the structured [[types]].\n   *\n   *  This is derived automatically from the [[types]], since no\n   *  recursion is possible, once the DAG for the types is consturcted\n   *  internally, the primary type must be the only remaining type with\n   *  no parent nodes.\n   */\n  primaryType;\n  #types;\n  /**\n   *  The types.\n   */\n  get types() {\n    return JSON.parse(this.#types);\n  }\n  #fullTypes;\n  #encoderCache;\n  /**\n   *  Create a new **TypedDataEncoder** for %%types%%.\n   *\n   *  This performs all necessary checking that types are valid and\n   *  do not violate the [[link-eip-712]] structural constraints as\n   *  well as computes the [[primaryType]].\n   */\n  constructor(_types) {\n    this.#fullTypes = new Map();\n    this.#encoderCache = new Map();\n    // Link struct types to their direct child structs\n    const links = new Map();\n    // Link structs to structs which contain them as a child\n    const parents = new Map();\n    // Link all subtypes within a given struct\n    const subtypes = new Map();\n    const types = {};\n    Object.keys(_types).forEach(type => {\n      types[type] = _types[type].map(_ref2 => {\n        let {\n          name,\n          type\n        } = _ref2;\n        // Normalize the base type (unless name conflict)\n        let {\n          base,\n          index\n        } = splitArray(type);\n        if (base === \"int\" && !_types[\"int\"]) {\n          base = \"int256\";\n        }\n        if (base === \"uint\" && !_types[\"uint\"]) {\n          base = \"uint256\";\n        }\n        return {\n          name,\n          type: base + (index || \"\")\n        };\n      });\n      links.set(type, new Set());\n      parents.set(type, []);\n      subtypes.set(type, new Set());\n    });\n    this.#types = JSON.stringify(types);\n    for (const name in types) {\n      const uniqueNames = new Set();\n      for (const field of types[name]) {\n        // Check each field has a unique name\n        assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", _types);\n        uniqueNames.add(field.name);\n        // Get the base type (drop any array specifiers)\n        const baseType = splitArray(field.type).base;\n        assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", _types);\n        // Is this a base encoding type?\n        const encoder = getBaseEncoder(baseType);\n        if (encoder) {\n          continue;\n        }\n        assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", _types);\n        // Add linkage\n        parents.get(baseType).push(name);\n        links.get(name).add(baseType);\n      }\n    }\n    // Deduce the primary type\n    const primaryTypes = Array.from(parents.keys()).filter(n => parents.get(n).length === 0);\n    assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", _types);\n    assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map(t => JSON.stringify(t)).join(\", \")}`, \"types\", _types);\n    defineProperties(this, {\n      primaryType: primaryTypes[0]\n    });\n    // Check for circular type references\n    function checkCircular(type, found) {\n      assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", _types);\n      found.add(type);\n      for (const child of links.get(type)) {\n        if (!parents.has(child)) {\n          continue;\n        }\n        // Recursively check children\n        checkCircular(child, found);\n        // Mark all ancestors as having this decendant\n        for (const subtype of found) {\n          subtypes.get(subtype).add(child);\n        }\n      }\n      found.delete(type);\n    }\n    checkCircular(this.primaryType, new Set());\n    // Compute each fully describe type\n    for (const [name, set] of subtypes) {\n      const st = Array.from(set);\n      st.sort();\n      this.#fullTypes.set(name, encodeType(name, types[name]) + st.map(t => encodeType(t, types[t])).join(\"\"));\n    }\n  }\n  /**\n   *  Returnthe encoder for the specific %%type%%.\n   */\n  getEncoder(type) {\n    let encoder = this.#encoderCache.get(type);\n    if (!encoder) {\n      encoder = this.#getEncoder(type);\n      this.#encoderCache.set(type, encoder);\n    }\n    return encoder;\n  }\n  #getEncoder(type) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return encoder;\n      }\n    }\n    // Array\n    const array = splitArray(type).array;\n    if (array) {\n      const subtype = array.prefix;\n      const subEncoder = this.getEncoder(subtype);\n      return value => {\n        assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\n        let result = value.map(subEncoder);\n        if (this.#fullTypes.has(subtype)) {\n          result = result.map(keccak256);\n        }\n        return keccak256(concat(result));\n      };\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      const encodedType = id(this.#fullTypes.get(type));\n      return value => {\n        const values = fields.map(_ref3 => {\n          let {\n            name,\n            type\n          } = _ref3;\n          const result = this.getEncoder(type)(value[name]);\n          if (this.#fullTypes.has(type)) {\n            return keccak256(result);\n          }\n          return result;\n        });\n        values.unshift(encodedType);\n        return concat(values);\n      };\n    }\n    assertArgument(false, `unknown type: ${type}`, \"type\", type);\n  }\n  /**\n   *  Return the full type for %%name%%.\n   */\n  encodeType(name) {\n    const result = this.#fullTypes.get(name);\n    assertArgument(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\n    return result;\n  }\n  /**\n   *  Return the encoded %%value%% for the %%type%%.\n   */\n  encodeData(type, value) {\n    return this.getEncoder(type)(value);\n  }\n  /**\n   *  Returns the hash of %%value%% for the type of %%name%%.\n   */\n  hashStruct(name, value) {\n    return keccak256(this.encodeData(name, value));\n  }\n  /**\n   *  Return the fulled encoded %%value%% for the [[types]].\n   */\n  encode(value) {\n    return this.encodeData(this.primaryType, value);\n  }\n  /**\n   *  Return the hash of the fully encoded %%value%% for the [[types]].\n   */\n  hash(value) {\n    return this.hashStruct(this.primaryType, value);\n  }\n  /**\n   *  @_ignore:\n   */\n  _visit(type, value, callback) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return callback(type, value);\n      }\n    }\n    // Array\n    const array = splitArray(type).array;\n    if (array) {\n      assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\n      return value.map(v => this._visit(array.prefix, v, callback));\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      return fields.reduce((accum, _ref4) => {\n        let {\n          name,\n          type\n        } = _ref4;\n        accum[name] = this._visit(type, value[name], callback);\n        return accum;\n      }, {});\n    }\n    assertArgument(false, `unknown type: ${type}`, \"type\", type);\n  }\n  /**\n   *  Call %%calback%% for each value in %%value%%, passing the type and\n   *  component within %%value%%.\n   *\n   *  This is useful for replacing addresses or other transformation that\n   *  may be desired on each component, based on its type.\n   */\n  visit(value, callback) {\n    return this._visit(this.primaryType, value, callback);\n  }\n  /**\n   *  Create a new **TypedDataEncoder** for %%types%%.\n   */\n  static from(types) {\n    return new TypedDataEncoder(types);\n  }\n  /**\n   *  Return the primary type for %%types%%.\n   */\n  static getPrimaryType(types) {\n    return TypedDataEncoder.from(types).primaryType;\n  }\n  /**\n   *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n   */\n  static hashStruct(name, types, value) {\n    return TypedDataEncoder.from(types).hashStruct(name, value);\n  }\n  /**\n   *  Return the domain hash for %%domain%%.\n   */\n  static hashDomain(domain) {\n    const domainFields = [];\n    for (const name in domain) {\n      if (domain[name] == null) {\n        continue;\n      }\n      const type = domainFieldTypes[name];\n      assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n      domainFields.push({\n        name,\n        type\n      });\n    }\n    domainFields.sort((a, b) => {\n      return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n    });\n    return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n      EIP712Domain: domainFields\n    }, domain);\n  }\n  /**\n   *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n   */\n  static encode(domain, types, value) {\n    return concat([\"0x1901\", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n  }\n  /**\n   *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n   */\n  static hash(domain, types, value) {\n    return keccak256(TypedDataEncoder.encode(domain, types, value));\n  }\n  // Replaces all address types with ENS names with their looked up address\n  /**\n   * Resolves to the value from resolving all addresses in %%value%% for\n   * %%types%% and the %%domain%%.\n   */\n  static async resolveNames(domain, types, value, resolveName) {\n    // Make a copy to isolate it from the object passed in\n    domain = Object.assign({}, domain);\n    // Allow passing null to ignore value\n    for (const key in domain) {\n      if (domain[key] == null) {\n        delete domain[key];\n      }\n    }\n    // Look up all ENS names\n    const ensCache = {};\n    // Do we need to look up the domain's verifyingContract?\n    if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n      ensCache[domain.verifyingContract] = \"0x\";\n    }\n    // We are going to use the encoder to visit all the base values\n    const encoder = TypedDataEncoder.from(types);\n    // Get a list of all the addresses\n    encoder.visit(value, (type, value) => {\n      if (type === \"address\" && !isHexString(value, 20)) {\n        ensCache[value] = \"0x\";\n      }\n      return value;\n    });\n    // Lookup each name\n    for (const name in ensCache) {\n      ensCache[name] = await resolveName(name);\n    }\n    // Replace the domain verifyingContract if needed\n    if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n      domain.verifyingContract = ensCache[domain.verifyingContract];\n    }\n    // Replace all ENS names with their address\n    value = encoder.visit(value, (type, value) => {\n      if (type === \"address\" && ensCache[value]) {\n        return ensCache[value];\n      }\n      return value;\n    });\n    return {\n      domain,\n      value\n    };\n  }\n  /**\n   *  Returns the JSON-encoded payload expected by nodes which implement\n   *  the JSON-RPC [[link-eip-712]] method.\n   */\n  static getPayload(domain, types, value) {\n    // Validate the domain fields\n    TypedDataEncoder.hashDomain(domain);\n    // Derive the EIP712Domain Struct reference type\n    const domainValues = {};\n    const domainTypes = [];\n    domainFieldNames.forEach(name => {\n      const value = domain[name];\n      if (value == null) {\n        return;\n      }\n      domainValues[name] = domainChecks[name](value);\n      domainTypes.push({\n        name,\n        type: domainFieldTypes[name]\n      });\n    });\n    const encoder = TypedDataEncoder.from(types);\n    // Get the normalized types\n    types = encoder.types;\n    const typesWithDomain = Object.assign({}, types);\n    assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n    typesWithDomain.EIP712Domain = domainTypes;\n    // Validate the data structures and types\n    encoder.encode(value);\n    return {\n      types: typesWithDomain,\n      domain: domainValues,\n      primaryType: encoder.primaryType,\n      message: encoder.visit(value, (type, value) => {\n        // bytes\n        if (type.match(/^bytes(\\d*)/)) {\n          return hexlify(getBytes(value));\n        }\n        // uint or int\n        if (type.match(/^u?int/)) {\n          return getBigInt(value).toString();\n        }\n        switch (type) {\n          case \"address\":\n            return value.toLowerCase();\n          case \"bool\":\n            return !!value;\n          case \"string\":\n            assertArgument(typeof value === \"string\", \"invalid string\", \"value\", value);\n            return value;\n        }\n        assertArgument(false, \"unsupported type\", \"type\", type);\n      })\n    };\n  }\n}\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(domain, types, value, signature) {\n  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}","map":{"version":3,"names":["getAddress","keccak256","recoverAddress","concat","defineProperties","getBigInt","getBytes","hexlify","isHexString","mask","toBeHex","toQuantity","toTwos","zeroPadValue","assertArgument","id","padding","Uint8Array","fill","BN__1","BigInt","BN_0","BN_1","BN_MAX_UINT256","hexPadRight","value","bytes","padOffset","length","slice","hexTrue","hexFalse","domainFieldTypes","name","version","chainId","verifyingContract","salt","domainFieldNames","checkString","key","JSON","stringify","domainChecks","_value","Number","isSafeInteger","toLowerCase","error","getBaseEncoder","type","match","signed","width","parseInt","String","boundsUpper","boundsLower","encodeType","fields","map","_ref","join","splitArray","base","index","array","prefix","count","TypedDataEncoder","primaryType","types","parse","fullTypes","encoderCache","constructor","_types","Map","links","parents","subtypes","Object","keys","forEach","_ref2","set","Set","uniqueNames","field","has","add","baseType","encoder","get","push","primaryTypes","Array","from","filter","n","t","checkCircular","found","child","subtype","delete","st","sort","getEncoder","#getEncoder","subEncoder","result","encodedType","values","_ref3","unshift","encodeData","hashStruct","encode","hash","_visit","callback","v","reduce","accum","_ref4","visit","getPrimaryType","hashDomain","domain","domainFields","a","b","indexOf","EIP712Domain","resolveNames","resolveName","assign","ensCache","getPayload","domainValues","domainTypes","typesWithDomain","message","toString","verifyTypedData","signature"],"sources":["../../src.ts/hash/typed-data.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}